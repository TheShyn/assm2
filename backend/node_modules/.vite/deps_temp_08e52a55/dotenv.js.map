{
  "version": 3,
  "sources": ["../../dotenv/package.json", "../../dotenv/lib/main.js"],
  "sourcesContent": ["{\r\n  \"name\": \"dotenv\",\r\n  \"version\": \"16.3.1\",\r\n  \"description\": \"Loads environment variables from .env file\",\r\n  \"main\": \"lib/main.js\",\r\n  \"types\": \"lib/main.d.ts\",\r\n  \"exports\": {\r\n    \".\": {\r\n      \"types\": \"./lib/main.d.ts\",\r\n      \"require\": \"./lib/main.js\",\r\n      \"default\": \"./lib/main.js\"\r\n    },\r\n    \"./config\": \"./config.js\",\r\n    \"./config.js\": \"./config.js\",\r\n    \"./lib/env-options\": \"./lib/env-options.js\",\r\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\r\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\r\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\r\n    \"./package.json\": \"./package.json\"\r\n  },\r\n  \"scripts\": {\r\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\r\n    \"lint\": \"standard\",\r\n    \"lint-readme\": \"standard-markdown\",\r\n    \"pretest\": \"npm run lint && npm run dts-check\",\r\n    \"test\": \"tap tests/*.js --100 -Rspec\",\r\n    \"prerelease\": \"npm test\",\r\n    \"release\": \"standard-version\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\r\n  },\r\n  \"funding\": \"https://github.com/motdotla/dotenv?sponsor=1\",\r\n  \"keywords\": [\r\n    \"dotenv\",\r\n    \"env\",\r\n    \".env\",\r\n    \"environment\",\r\n    \"variables\",\r\n    \"config\",\r\n    \"settings\"\r\n  ],\r\n  \"readmeFilename\": \"README.md\",\r\n  \"license\": \"BSD-2-Clause\",\r\n  \"devDependencies\": {\r\n    \"@definitelytyped/dtslint\": \"^0.0.133\",\r\n    \"@types/node\": \"^18.11.3\",\r\n    \"decache\": \"^4.6.1\",\r\n    \"sinon\": \"^14.0.1\",\r\n    \"standard\": \"^17.0.0\",\r\n    \"standard-markdown\": \"^7.1.0\",\r\n    \"standard-version\": \"^9.5.0\",\r\n    \"tap\": \"^16.3.0\",\r\n    \"tar\": \"^6.1.11\",\r\n    \"typescript\": \"^4.8.4\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=12\"\r\n  },\r\n  \"browser\": {\r\n    \"fs\": false\r\n  }\r\n}\r\n", "const fs = require('fs')\r\nconst path = require('path')\r\nconst os = require('os')\r\nconst crypto = require('crypto')\r\nconst packageJson = require('../package.json')\r\n\r\nconst version = packageJson.version\r\n\r\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\r\n\r\n// Parse src into an Object\r\nfunction parse (src) {\r\n  const obj = {}\r\n\r\n  // Convert buffer to string\r\n  let lines = src.toString()\r\n\r\n  // Convert line breaks to same format\r\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\r\n\r\n  let match\r\n  while ((match = LINE.exec(lines)) != null) {\r\n    const key = match[1]\r\n\r\n    // Default undefined or null to empty string\r\n    let value = (match[2] || '')\r\n\r\n    // Remove whitespace\r\n    value = value.trim()\r\n\r\n    // Check if double quoted\r\n    const maybeQuote = value[0]\r\n\r\n    // Remove surrounding quotes\r\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\r\n\r\n    // Expand newlines if double quoted\r\n    if (maybeQuote === '\"') {\r\n      value = value.replace(/\\\\n/g, '\\n')\r\n      value = value.replace(/\\\\r/g, '\\r')\r\n    }\r\n\r\n    // Add to object\r\n    obj[key] = value\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\nfunction _parseVault (options) {\r\n  const vaultPath = _vaultPath(options)\r\n\r\n  // Parse .env.vault\r\n  const result = DotenvModule.configDotenv({ path: vaultPath })\r\n  if (!result.parsed) {\r\n    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\r\n  }\r\n\r\n  // handle scenario for comma separated keys - for use with key rotation\r\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\r\n  const keys = _dotenvKey(options).split(',')\r\n  const length = keys.length\r\n\r\n  let decrypted\r\n  for (let i = 0; i < length; i++) {\r\n    try {\r\n      // Get full key\r\n      const key = keys[i].trim()\r\n\r\n      // Get instructions for decrypt\r\n      const attrs = _instructions(result, key)\r\n\r\n      // Decrypt\r\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\r\n\r\n      break\r\n    } catch (error) {\r\n      // last key\r\n      if (i + 1 >= length) {\r\n        throw error\r\n      }\r\n      // try next key\r\n    }\r\n  }\r\n\r\n  // Parse decrypted .env string\r\n  return DotenvModule.parse(decrypted)\r\n}\r\n\r\nfunction _log (message) {\r\n  console.log(`[dotenv@${version}][INFO] ${message}`)\r\n}\r\n\r\nfunction _warn (message) {\r\n  console.log(`[dotenv@${version}][WARN] ${message}`)\r\n}\r\n\r\nfunction _debug (message) {\r\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\r\n}\r\n\r\nfunction _dotenvKey (options) {\r\n  // prioritize developer directly setting options.DOTENV_KEY\r\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\r\n    return options.DOTENV_KEY\r\n  }\r\n\r\n  // secondary infra already contains a DOTENV_KEY environment variable\r\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\r\n    return process.env.DOTENV_KEY\r\n  }\r\n\r\n  // fallback to empty string\r\n  return ''\r\n}\r\n\r\nfunction _instructions (result, dotenvKey) {\r\n  // Parse DOTENV_KEY. Format is a URI\r\n  let uri\r\n  try {\r\n    uri = new URL(dotenvKey)\r\n  } catch (error) {\r\n    if (error.code === 'ERR_INVALID_URL') {\r\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')\r\n    }\r\n\r\n    throw error\r\n  }\r\n\r\n  // Get decrypt key\r\n  const key = uri.password\r\n  if (!key) {\r\n    throw new Error('INVALID_DOTENV_KEY: Missing key part')\r\n  }\r\n\r\n  // Get environment\r\n  const environment = uri.searchParams.get('environment')\r\n  if (!environment) {\r\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part')\r\n  }\r\n\r\n  // Get ciphertext payload\r\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\r\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\r\n  if (!ciphertext) {\r\n    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\r\n  }\r\n\r\n  return { ciphertext, key }\r\n}\r\n\r\nfunction _vaultPath (options) {\r\n  let dotenvPath = path.resolve(process.cwd(), '.env')\r\n\r\n  if (options && options.path && options.path.length > 0) {\r\n    dotenvPath = options.path\r\n  }\r\n\r\n  // Locate .env.vault\r\n  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`\r\n}\r\n\r\nfunction _resolveHome (envPath) {\r\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\r\n}\r\n\r\nfunction _configVault (options) {\r\n  _log('Loading env from encrypted .env.vault')\r\n\r\n  const parsed = DotenvModule._parseVault(options)\r\n\r\n  let processEnv = process.env\r\n  if (options && options.processEnv != null) {\r\n    processEnv = options.processEnv\r\n  }\r\n\r\n  DotenvModule.populate(processEnv, parsed, options)\r\n\r\n  return { parsed }\r\n}\r\n\r\nfunction configDotenv (options) {\r\n  let dotenvPath = path.resolve(process.cwd(), '.env')\r\n  let encoding = 'utf8'\r\n  const debug = Boolean(options && options.debug)\r\n\r\n  if (options) {\r\n    if (options.path != null) {\r\n      dotenvPath = _resolveHome(options.path)\r\n    }\r\n    if (options.encoding != null) {\r\n      encoding = options.encoding\r\n    }\r\n  }\r\n\r\n  try {\r\n    // Specifying an encoding returns a string instead of a buffer\r\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\r\n\r\n    let processEnv = process.env\r\n    if (options && options.processEnv != null) {\r\n      processEnv = options.processEnv\r\n    }\r\n\r\n    DotenvModule.populate(processEnv, parsed, options)\r\n\r\n    return { parsed }\r\n  } catch (e) {\r\n    if (debug) {\r\n      _debug(`Failed to load ${dotenvPath} ${e.message}`)\r\n    }\r\n\r\n    return { error: e }\r\n  }\r\n}\r\n\r\n// Populates process.env from .env file\r\nfunction config (options) {\r\n  const vaultPath = _vaultPath(options)\r\n\r\n  // fallback to original dotenv if DOTENV_KEY is not set\r\n  if (_dotenvKey(options).length === 0) {\r\n    return DotenvModule.configDotenv(options)\r\n  }\r\n\r\n  // dotenvKey exists but .env.vault file does not exist\r\n  if (!fs.existsSync(vaultPath)) {\r\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\r\n\r\n    return DotenvModule.configDotenv(options)\r\n  }\r\n\r\n  return DotenvModule._configVault(options)\r\n}\r\n\r\nfunction decrypt (encrypted, keyStr) {\r\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\r\n  let ciphertext = Buffer.from(encrypted, 'base64')\r\n\r\n  const nonce = ciphertext.slice(0, 12)\r\n  const authTag = ciphertext.slice(-16)\r\n  ciphertext = ciphertext.slice(12, -16)\r\n\r\n  try {\r\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\r\n    aesgcm.setAuthTag(authTag)\r\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\r\n  } catch (error) {\r\n    const isRange = error instanceof RangeError\r\n    const invalidKeyLength = error.message === 'Invalid key length'\r\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\r\n\r\n    if (isRange || invalidKeyLength) {\r\n      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)'\r\n      throw new Error(msg)\r\n    } else if (decryptionFailed) {\r\n      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY'\r\n      throw new Error(msg)\r\n    } else {\r\n      console.error('Error: ', error.code)\r\n      console.error('Error: ', error.message)\r\n      throw error\r\n    }\r\n  }\r\n}\r\n\r\n// Populate process.env with parsed values\r\nfunction populate (processEnv, parsed, options = {}) {\r\n  const debug = Boolean(options && options.debug)\r\n  const override = Boolean(options && options.override)\r\n\r\n  if (typeof parsed !== 'object') {\r\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\r\n  }\r\n\r\n  // Set process.env\r\n  for (const key of Object.keys(parsed)) {\r\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\r\n      if (override === true) {\r\n        processEnv[key] = parsed[key]\r\n      }\r\n\r\n      if (debug) {\r\n        if (override === true) {\r\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\r\n        } else {\r\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\r\n        }\r\n      }\r\n    } else {\r\n      processEnv[key] = parsed[key]\r\n    }\r\n  }\r\n}\r\n\r\nconst DotenvModule = {\r\n  configDotenv,\r\n  _configVault,\r\n  _parseVault,\r\n  config,\r\n  decrypt,\r\n  parse,\r\n  populate\r\n}\r\n\r\nmodule.exports.configDotenv = DotenvModule.configDotenv\r\nmodule.exports._configVault = DotenvModule._configVault\r\nmodule.exports._parseVault = DotenvModule._parseVault\r\nmodule.exports.config = DotenvModule.config\r\nmodule.exports.decrypt = DotenvModule.decrypt\r\nmodule.exports.parse = DotenvModule.parse\r\nmodule.exports.populate = DotenvModule.populate\r\n\r\nmodule.exports = DotenvModule\r\n"],
  "mappings": "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",
  "names": []
}
